name: Reviewer (OpenAI)
permissions:
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get Diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}... --unified=0 > diff.patch

      - name: Prepare request JSON (Python)
        id: mkjson
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Build JSON request
        id: build
        run: |
          python - << 'PY'
import json
# Read and trim diff to keep payload safe
diff = open("diff.patch","r",encoding="utf-8",errors="ignore").read()[:200000]
prompt = (
  "You are a Staff Engineer. Review this diff for correctness, security "
  "(Firebase Rules, signed URLs), performance (PDF/IFC budgets), accessibility, "
  "and test coverage. Return ONLY markdown with:\n"
  "1) SUMMARY\n2) BLOCKERS (must fix)\n3) SUGGESTIONS\n4) TESTS to add.\n\nDiff:\n"
  + diff
)
req = {
  "model": "gpt-4o-mini",
  "temperature": 0,
  "messages": [{"role":"user","content": prompt}]
}
open("req.json","w",encoding="utf-8").write(json.dumps(req))
PY

      - name: Call OpenAI
        id: call
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @req.json > out.json
          # Basic failure check
          jq -e '.choices[0].message.content' out.json > /dev/null

      - name: Extract review text
        id: extract
        run: |
          python - << 'PY'
import json, sys
data = json.load(open("out.json","r",encoding="utf-8"))
text = data["choices"][0]["message"]["content"]
open("review.md","w",encoding="utf-8").write(text)
print(text)
PY

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('review.md','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
