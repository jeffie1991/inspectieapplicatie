name: Implementer (Claude)
permissions:
  contents: write
  pull-requests: write

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  build-feature:
    if: contains(github.event.issue.labels.*.name, 'spec')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract Spec
        id: spec
        run: |
          echo "BODY<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Call Anthropic (Claude)
        id: claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python3 - << 'PY'
import os, json, sys, urllib.request
spec = """${{ steps.spec.outputs.BODY }}"""
prompt = f"""
You are Claude Code. Implement the SPEC CARD by returning a set of files with this exact format:

<<<file:relative/path>>>
...code...
<<<endfile>>>

(Repeat per file)
Then a section:
<<<commands>>>
one shell command per line
<<<endcommands>>>

NO explanations. SPEC:

{spec}
"""
req = urllib.request.Request(
  url="https://api.anthropic.com/v1/messages",
  headers={
    "x-api-key": os.environ["ANTHROPIC_API_KEY"],
    "anthropic-version": "2023-06-01",
    "content-type":"application/json"
  },
  data=json.dumps({
    "model":"claude-3-5-sonnet-latest",
    "max_tokens": 4096,
    "messages":[{"role":"user","content":prompt}]
  }).encode("utf-8")
)
try:
  with urllib.request.urlopen(req) as r:
    res = json.loads(r.read().decode("utf-8"))
except Exception as e:
  print("ERROR calling Anthropic:", e, file=sys.stderr)
  sys.exit(1)

text = ""
for part in res.get("content", []):
  if part.get("type") == "text":
    text += part.get("text","")

open("claude_out.txt","w",encoding="utf-8").write(text)
PY

      - name: Parse + Write Files
        id: write
        run: |
          python3 - << 'PY'
import re, pathlib
txt = open("claude_out.txt", encoding="utf-8").read()

files = re.findall(r"<<<file:(.+?)>>>\n(.*?)\n<<<endfile>>>", txt, flags=re.S)
for path, code in files:
  p = pathlib.Path(path)
  p.parent.mkdir(parents=True, exist_ok=True)
  p.write_text(code, encoding="utf-8")

cmds = re.findall(r"<<<commands>>>\n(.*?)\n<<<endcommands>>>", txt, flags=re.S)
open("commands.txt","w",encoding="utf-8").write(cmds[0] if cmds else "")
PY

      - name: Create Branch, Commit, PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BR="auto/sc-${{ github.event.issue.number }}"
          git checkout -b "$BR"
          git add -A
          git -c user.name="ai-implementer" -c user.email="bot@users.noreply.github.com" commit -m "AI: implement SC-${{ github.event.issue.number }}"
          git push -u origin "$BR"
          gh pr create --title "AI: SC #${{ github.event.issue.number }}" --body "Auto-generated by Implementer" --head "$BR"
